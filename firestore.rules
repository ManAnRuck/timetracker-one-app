service cloud.firestore {
  match /databases/{database}/documents {

    /*
      TODO: Structure of object
    */
    match /users/{user} {
      allow read, update, delete: if request.auth.uid == user;
      allow create: if request.auth.uid != null;
    }



    /*
    TODO: Structure of object
    */

    match /teams/{team} {
      allow read, list: if resource.data.members.hasAny([request.auth.uid]) || resource.data.admins.hasAny([request.auth.uid]);
      allow update, delete: if resource.data.admins.hasAny([request.auth.uid]);
      allow create: if request.auth.uid != null && request.resource.data.admins.hasAny([request.auth.uid]);
    }
    
    
    
    /*
    TODO: Structure of object
    */

    match /tasks/{task} {
      allow read, list: if request.auth.uid != null && get(/databases/$(database)/documents/teams/$(resource.data.team)).data.admins.hasAny([request.auth.uid]);
      allow create: if request.auth.uid != null && request.resource.data.user == request.auth.uid && get(/databases/$(database)/documents/teams/$(request.resource.data.team)).data.admins.hasAny([request.auth.uid])
      allow update: if request.auth.uid != null && get(/databases/$(database)/documents/teams/$(resource.data.team)).data.admins.hasAny([request.auth.uid])
      allow delete: if request.auth.uid != null && get(/databases/$(database)/documents/teams/$(resource.data.team)).data.admins.hasAny([request.auth.uid])
    }
    
    
    
    /*
    TODO: Structure of object
    */

    match /times/{time} {
      allow read, list: if request.auth.uid != null && get(/databases/$(database)/documents/teams/$(resource.data.team)).data.admins.hasAny([request.auth.uid]);
      allow create: if request.auth.uid != null && request.resource.data.user == request.auth.uid && get(/databases/$(database)/documents/teams/$(request.resource.data.team)).data.admins.hasAny([request.auth.uid])
      allow update: if request.auth.uid == resource.data.user && request.resource.data.team == resource.data.team
      allow delete: if request.auth.uid == resource.data.user
    }
    
    
    /*
    TODO: Structure of object
    */

    match /invitations/{invitation} {
      allow read: if request.auth.email == resource.email || get(/databases/$(database)/documents/teams/$(resource.data.team)).data.admins.hasAny([request.auth.uid]);
      allow list: if get(/databases/$(database)/documents/teams/$(resource.data.team)).data.admins.hasAny([request.auth.uid]);
      allow create: if request.auth.uid != null && get(/databases/$(database)/documents/teams/$(request.resource.data.team)).data.admins.hasAny([request.auth.uid])
      allow update: if false
      allow delete: if request.auth.email == resource.email || get(/databases/$(database)/documents/teams/$(resource.data.team)).data.admins.hasAny([request.auth.uid])
    }
  }
}